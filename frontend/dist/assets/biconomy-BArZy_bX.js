import{Z as w}from"./addresses-Cbjra2SQ.js";import{af as c,a5 as f,g as y,a7 as i,aA as u}from"./index-anYD-FGg.js";import{r as g}from"./read-contract-Cc_S5oDR.js";import{o as l}from"./to-serializable-transaction-CBqCJM9h.js";import"./stringify-cJu1y5js.js";const d=0n;async function x({account:a,serializableTransaction:e,transaction:o,gasless:n}){const r=y({address:n.relayerForwarderAddress,chain:o.chain,client:o.client}),s=await g({contract:r,method:"function getNonce(address,uint256) view returns (uint256)",params:[a.address,d]}),h=Math.floor(Date.now()/1e3)+(n.deadlineSeconds??3600),t={from:a.address,to:e.to,token:w,txGas:e.gas,tokenGasPrice:0n,batchId:d,batchNonce:s,deadline:h,data:e.data};if(!t.to)throw new Error("Cannot send a transaction without a `to` address");if(!t.txGas)throw new Error("Cannot send a transaction without a `gas` value");if(!t.data)throw new Error("Cannot send a transaction without a `data` value");const p=l([{type:"address"},{type:"address"},{type:"address"},{type:"uint256"},{type:"uint256"},{type:"uint256"},{type:"uint256"},{type:"bytes32"}],[i(t.from),i(t.to),i(t.token),t.txGas,t.tokenGasPrice,t.batchId,t.batchNonce,u(t.data)]),m=await a.signMessage({message:p});return[t,m]}async function G(a){const[e,o]=await x(a),n=await fetch("https://api.biconomy.io/api/v2/meta-tx/native",{method:"POST",body:c({apiId:a.gasless.apiId,params:[e,o],from:e.from,to:e.to,gasLimit:e.txGas}),headers:{"x-api-key":a.gasless.apiKey,"Content-Type":"application/json;charset=utf-8"}});if(!n.ok)throw new Error(`Failed to send transaction: ${await n.text()}`);const r=await n.json(),s=r.txHash;if(f(s))return{transactionHash:s,chain:a.transaction.chain,client:a.transaction.client};throw new Error(`Failed to send transaction: ${c(r)}`)}export{x as prepareBiconomyTransaction,G as relayBiconomyTransaction};
